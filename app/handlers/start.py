'''
FILE FOR WORK WITH COMMANDS | –§–ê–ô–õ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–û–ú–ê–ù–î–ê–ú–ò
'''
from dotenv import load_dotenv
import os

load_dotenv()
from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from datetime import datetime
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è | Localization
from localization import t

#* Keyboards | –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from .keyboards import get_main_keyboard, get_game_keyboard, get_start_keyboard
#* Database | –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
from sqlmodel import Session, select
from typing import Optional
from database.models import (
    engine,
    UsersSchema,
    GameProfilesSchema,
    UserStatsSchema,
    MatchPlayersSchema,
    MatchesSchema,
    FoundMatchSchema,
)

router = Router()

class RegistrationStates(StatesGroup):
    waiting_for_game_id = State()
    waiting_for_nickname = State()
    waiting_for_confirmation = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

def get_user_league(telegram_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–∏–≥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è | Get user league"""
    with Session(engine) as session:
        user_league = session.exec(
            select(GameProfilesSchema.league)
            .join(UsersSchema, GameProfilesSchema.user_id == UsersSchema.user_id)
            .where(UsersSchema.telegram_id == telegram_id)
        ).first()
    return user_league 

def get_confirmation_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è | Creates confirmation keyboard"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å | Confirm", callback_data="confirm_registration")
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å | Edit", callback_data="edit_registration")
    builder.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    return builder.as_markup()

# –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ | Simple function to get language
def get_lang(user_id: int) -> str:
    return 'ru'  # –ü–æ–∫–∞ –≤—Å–µ–≥–¥–∞ —Ä—É—Å—Å–∫–∏–π | For now always Russian

#* commands | –∫–æ–º–∞–Ω–¥—ã
@router.message(Command("start"))
async def start_handler(message: Message):
    telegram_id = message.from_user.id
    username = message.from_user.username or "–ò–≥—Ä–æ–∫ | Player"
    first_name = message.from_user.first_name or "–ò–≥—Ä–æ–∫ | Player"
    last_name = message.from_user.last_name or ""
    lang = get_lang(telegram_id)
    
    with Session(engine) as session:
        statement = select(UsersSchema).where(UsersSchema.telegram_id == telegram_id)
        user = session.exec(statement).first()
        
        if not user:
            # –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ | If not exists, create new one
            user = UsersSchema(
                telegram_id=telegram_id,
                username=username,
                first_name=first_name,
                created_at=datetime.now(),
            )
            session.add(user)
            session.commit()
            session.refresh(user)
            
            await message.answer(
                f"{t('start.welcome', lang)}\n\n"
                f"{t('start.register_prompt', lang)}\n\n"
                f"–ü—Ä–∏–≤–µ—Ç! –¢–≤–æ–π Telegram ID: {telegram_id}\n"
                f"–¢–≤–æ—ë –∏–º—è: {first_name}\n"
                f"Username: {username}",
                reply_markup=get_start_keyboard()
            )
        else:
            await message.answer(
                f"{t('start.welcome_back', lang, username=username)}\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã | Available commands:\n"
                "/profile - –ü—Ä–æ—Ñ–∏–ª—å\n"
                "/lobby - –ù–∞–π—Ç–∏ –ª–æ–±–±–∏\n" 
                "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "/top - –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n\n",
                parse_mode="HTML",
                reply_markup=get_game_keyboard()
            )
    
@router.message(Command("register"))
async def command_register_handler(message: Message, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è | Start game profile registration"""
    lang = get_lang(message.from_user.id)
    
    with Session(engine) as session:
        user = session.exec(
            select(UsersSchema).where(UsersSchema.telegram_id == message.from_user.id)
        ).first()
        
        if not user:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ—Ç | Create user if not exists
            new_user = UsersSchema(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
            session.add(new_user)
            session.commit()
            session.refresh(new_user)
            user_id = new_user.user_id
        else:
            user_id = user.user_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å | Check if game profile already exists
        existing_profile = session.exec(
            select(GameProfilesSchema).where(GameProfilesSchema.user_id == user_id)
        ).first()
        league = get_user_league(message.from_user.id)
        
        if existing_profile:
            await message.answer(
                f"{t('register.already_exists', lang)}\n\n"
                f"–ù–∏–∫ | Nick: {existing_profile.nickname}\n"
                f"ID: {existing_profile.game_id}\n"
                f"–õ–∏–≥–∞ | League: {league.capitalize() if league else 'Starter'}"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É game_id
        # Save user_id in state and proceed to game_id input
        await state.set_data({"user_id": user_id})
        await state.set_state(RegistrationStates.waiting_for_game_id)
        await message.answer(
            f"{t('register.enter_game_id', lang)}\n"
            f"{t('register.game_id_rules', lang)}"
        )

@router.message(RegistrationStates.waiting_for_game_id)
async def process_game_id(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Game ID | Process Game ID input"""
    lang = get_lang(message.from_user.id)
    game_id = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è Game ID | Game ID validation
    if not game_id.isdigit():
        await message.answer(t('register.invalid_game_id', lang))
        return
    
    if len(game_id) < 8:
        await message.answer(t('register.invalid_game_id', lang))
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —ç—Ç–æ—Ç game_id | Check if game_id is already taken
    with Session(engine) as session:
        existing_game_id = session.exec(
            select(GameProfilesSchema).where(GameProfilesSchema.game_id == game_id)
        ).first()
        
        if existing_game_id:
            await message.answer(t('register.game_id_taken', lang))
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º game_id –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É nickname
    # Save game_id and proceed to nickname input
    await state.update_data({"game_id": game_id})
    await state.set_state(RegistrationStates.waiting_for_nickname)
    
    await message.answer(
        f"{t('register.enter_nickname', lang)}\n"
        f"{t('register.nickname_rules', lang)}"
    )

@router.message(RegistrationStates.waiting_for_nickname)
async def process_nickname(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞ | Process nickname input"""
    lang = get_lang(message.from_user.id)
    nickname = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ | Nickname validation
    if len(nickname) > 16:
        await message.answer(t('register.invalid_nickname', lang))
        return
    
    if len(nickname) < 2:
        await message.answer(t('register.invalid_nickname', lang))
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º nickname –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    # Save nickname and proceed to confirmation
    await state.update_data({"nickname": nickname})
    await state.set_state(RegistrationStates.waiting_for_confirmation)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è | Get all data for display
    data = await state.get_data()
    game_id = data.get("game_id")
    
    await message.answer(
        f"üìã <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò | REGISTRATION CONFIRMATION</b>\n\n"
        f"‚úÖ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å | Your profile:</b>\n"
        f"‚ñ´Ô∏è –ù–∏–∫ | Nick: <b>{nickname}</b>\n"
        f"‚ñ´Ô∏è Game ID: <b>{game_id}</b>\n"
        f"‚ñ´Ô∏è –õ–∏–≥–∞ | League: <b>Starter</b>\n\n"
        f"<i>–í—Å—ë –≤–µ—Ä–Ω–æ? | Is everything correct?</i>",
        parse_mode="HTML",
        reply_markup=get_confirmation_keyboard()
    )

@router.callback_query(F.data == "confirm_registration")
async def confirm_registration(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ | Confirm registration"""
    lang = get_lang(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è | Get data from state
    data = await state.get_data()
    user_id = data.get("user_id")
    game_id = data.get("game_id")
    nickname = data.get("nickname")
    
    # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å | Create game profile
    with Session(engine) as session:
        new_profile = GameProfilesSchema(
            user_id=user_id,
            nickname=nickname,
            game_id=game_id
        )
        
        session.add(new_profile)
        session.commit()
        session.refresh(new_profile)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è | Create statistics record for profile
        new_stats = UserStatsSchema(
            user_id=user_id,
            profile_id=new_profile.game_profile_id
        )
        session.add(new_stats)
        session.commit()
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ | Clear state
    await state.clear()
    
    league = get_user_league(callback.from_user.id)        
    await callback.message.edit_text(
        f"{t('register.complete', lang)}\n\n"
        f"‚úÖ <b>–í–∞—à –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å | Your game profile:</b>\n"
        f"‚ñ´Ô∏è –ù–∏–∫ | Nick: <b>{nickname}</b>\n"
        f"‚ñ´Ô∏è Game ID: <b>{game_id}</b>\n"
        f"‚ñ´Ô∏è –õ–∏–≥–∞ | League: <b>{league.capitalize() if league else 'Starter'}</b>\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!\n"
        f"Now you can use all bot features!\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ /profile —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        f"Write /profile to view statistics",
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "edit_registration")
async def edit_registration(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ | Edit registration"""
    lang = get_lang(callback.from_user.id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É nickname | Return to nickname input
    await state.set_state(RegistrationStates.waiting_for_nickname)
    
    await callback.message.edit_text(
        f"{t('register.enter_nickname', lang)}\n"
        f"{t('register.nickname_rules', lang)}"
    )
    await callback.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º | Enter new nickname")

#! testing how bot work in groups and supergroups | —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö
CHAT_ID = os.getenv('CHAT_ID_SPEAKING')
@router.message()
async def handle_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π | All messages handler"""
    if message.chat.id == CHAT_ID and "test" in message.text.lower():
        await message.reply("üçé I catch message test | –Ø –ø–æ–π–º–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ test")
    else:
        return