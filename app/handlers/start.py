'''
FILE FOR WORK WITH COMMANDS
'''
from dotenv import load_dotenv
import os
load_dotenv()
from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from datetime import datetime
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
#* Database
from sqlmodel import Session, select
from typing import Optional
from database.models import (
    engine,
    UsersSchema,
    GameProfilesSchema,
    UserStatsSchema,
    MatchPlayersSchema,
    MatchesSchema,
    FoundMatchSchema,
)

#todo: replace / commands to keyboards Reply or Inline
router = Router()

class RegistrationStates(StatesGroup):
    waiting_for_game_id = State()
    waiting_for_nickname = State()

def get_user_league(telegram_id: int):
    with Session(engine) as session:
        user_league = session.exec(
            select(GameProfilesSchema.league)
            .join(UsersSchema, GameProfilesSchema.user_id == UsersSchema.user_id)
            .where(UsersSchema.telegram_id == telegram_id)
        ).first()
    return user_league 

#* commands
#? register user telegram
@router.message(Command("start"))
async def start_handler(message: Message):
    telegram_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    first_name = message.from_user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    last_name = message.from_user.last_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    # check user in db
    with Session(engine) as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        # we take telegram_id to check user in system/DB
        statement = select(UsersSchema).where(UsersSchema.telegram_id == telegram_id)
        user = session.exec(statement).first()
        
        if not user:
            # –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ
            # if user not exists we are adding him for DB
            user = UsersSchema(
                telegram_id=telegram_id,
                username=username,
                first_name=first_name,
                created_at=datetime.now(),
            )
            session.add(user)
            session.commit()
            session.refresh(user)

    await message.answer(
        "üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Proxima!</b>\n\n"
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —ç–ª–∏—Ç–Ω–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É\n"
        "<i>–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é</i>\n\n"
        "/register\n\n"
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/help - –ü–æ–º–æ—â—å\n\n"
        #! test
        f"–ü—Ä–∏–≤–µ—Ç! –¢–≤–æ–π Telegram ID: {telegram_id}\n"
        f"–¢–≤–æ—ë –∏–º—è: {first_name}\n"
        f"Username: {username}\n"
        f"–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {last_name}"
    )
    
#? register game profile
#todo create exit button to stop register   
@router.message(Command("register"))
async def command_register_handler(message: Message, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    
    #* in /start we have this code
    with Session(engine) as session:
        user = session.exec(
            select(UsersSchema).where(UsersSchema.telegram_id == message.from_user.id)
        ).first()
        
        if not user:
            new_user = UsersSchema(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
            session.add(new_user)
            session.commit()
            session.refresh(new_user)
            user_id = new_user.user_id
        else:
            user_id = user.user_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
        # Check have a user a game profile
        existing_profile = session.exec(
            select(GameProfilesSchema).where(GameProfilesSchema.user_id == user_id)
        ).first()
        league = get_user_league(message.from_user.id)
        if existing_profile:
            await message.answer(
                "üîπ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!\n"
                #! test
                f"–ù–∏–∫: {existing_profile.nickname}\n"
                f"ID: {existing_profile.game_id}\n"
                f"–õ–∏–≥–∞: {league.capitalize()}"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É game_id
        # save in State() game_id
        await state.set_data({"user_id": user_id})
        await state.set_state(RegistrationStates.waiting_for_game_id)
        await message.answer(
            "üéÆ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Game ID –∏–∑ Standoff 2:\n"
            "‚ñ´Ô∏è –≠—Ç–æ 8-–∑–Ω–∞—á–Ω—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä\n"
            "‚ñ´Ô∏è –ü—Ä–∏–º–µ—Ä: 12345678"
        )

@router.message(RegistrationStates.waiting_for_game_id)
async def process_game_id(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Game ID"""
    
    game_id = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è Game ID
    if not game_id.isdigit():
        await message.answer("‚ùå Game ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    if len(game_id) < 8:
        await message.answer("‚ùå Game ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Ü–∏—Ñ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —ç—Ç–æ—Ç game_id
    # checking game_id is used or not
    with Session(engine) as session:
        existing_game_id = session.exec(
            select(GameProfilesSchema).where(GameProfilesSchema.game_id == game_id)
        ).first()
        
        if existing_game_id:
            await message.answer("‚ùå –≠—Ç–æ—Ç Game ID —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:")
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º game_id –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É nickname
    # save in State game_id
    await state.update_data({"game_id": game_id})
    await state.set_state(RegistrationStates.waiting_for_nickname)
    
    await message.answer(
        "‚úÖ Game ID –ø—Ä–∏–Ω—è—Ç!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º:\n"
        "‚ñ´Ô∏è –ú–∞–∫—Å–∏–º—É–º 16 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚ñ´Ô∏è –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã"
    )

@router.message(RegistrationStates.waiting_for_nickname)
async def process_nickname(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    nickname = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∏–∫–Ω–µ–π–º–∞
    # Validation nickename
    if len(nickname) > 16:
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 16 —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    if len(nickname) < 2:
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    # getting data from State()
    data = await state.get_data()
    user_id = data.get("user_id")
    game_id = data.get("game_id")
    
    # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    # create game profile
    with Session(engine) as session:
        new_profile = GameProfilesSchema(
            user_id=user_id,
            nickname=nickname,
            game_id=game_id
        )
        
        session.add(new_profile)
        session.commit()
        session.refresh(new_profile)
        
        new_stats = UserStatsSchema(
            user_id=user_id,
            profile_id=new_profile.game_profile_id
        )
        session.add(new_stats)
        session.commit()
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    # clear State()
    await state.clear()
    
    league = get_user_league(message.from_user.id)        
    await message.answer(
        "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"‚úÖ –í–∞—à –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"‚ñ´Ô∏è –ù–∏–∫: {nickname}\n"
        f"‚ñ´Ô∏è Game ID: {game_id}\n"
        f"‚ñ´Ô∏è –õ–∏–≥–∞: {league.capitalize()}\n\n"
        #todo: add buttons [‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å] [‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å] | [‚úÖ Accept] [‚úèÔ∏è Remake]
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ /profile —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    )
#! testing how bot work in groups and supergroups 
CHAT_ID = os.getenv('CHAT_ID_SPEAKING')
@router.message()
async def handle_messages(message: Message):
    if message.chat.id == CHAT_ID and "test" in message.text.lower():
        await message.reply("üçé I catch message test")
    else:
        return