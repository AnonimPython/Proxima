'''
MATCH REGISTRATION HANDLER
'''

import os
import uuid
from aiogram import Router, F
from aiogram.types import Message, ContentType, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
from sqlmodel import Session, select
from database.models import engine, MatchesSchema, MatchPlayersSchema, UsersSchema, MatchPhotosSchema, GameProfilesSchema
from zoneinfo import ZoneInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()
moscow_tz = ZoneInfo("Europe/Moscow")

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç | Create photos directory if not exists
PHOTOS_DIR = "app/photo_matches"
os.makedirs(PHOTOS_DIR, exist_ok=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM | States for FSM
class MatchRegistrationStates(StatesGroup):
    waiting_for_match_id = State()
    waiting_for_photo = State()

def get_cancel_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã | Creates keyboard with cancel button"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_registration")
    return builder.as_markup()

@router.message(Command("match_register"))
async def start_match_registration(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Ç—á–∞ | Start match registration"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å | Check if user has game profile
    with Session(engine) as session:
        user = session.exec(
            select(UsersSchema).where(UsersSchema.telegram_id == message.from_user.id)
        ).first()
        
        if not user:
            await message.answer(
                "‚ùå<b>–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!</b>‚ùå\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                parse_mode="HTML"
            )
            return
        
        game_profile = session.exec(
            select(GameProfilesSchema).where(GameProfilesSchema.user_id == user.user_id)
        ).first()
        
        if not game_profile:
            await message.answer(
                "‚ùå<b>–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!</b>‚ùå\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                parse_mode="HTML"
            )
            return
    
    await state.set_state(MatchRegistrationStates.waiting_for_match_id)
    await message.answer(
        "üéÆ <b>–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ú–ê–¢–ß–ê</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä –º–∞—Ç—á–∞</b>:\n"
        "‚ñ´Ô∏è –≠—Ç–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π ID –º–∞—Ç—á–∞\n"
        "‚ñ´Ô∏è –ü—Ä–∏–º–µ—Ä: 12345\n\n"
        "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã</i>",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )

@router.message(MatchRegistrationStates.waiting_for_match_id)
async def process_match_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –º–∞—Ç—á–∞ | Process match ID input"""
    
    match_id_text = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ | Input validation
    if not match_id_text.isdigit():
        await message.answer(
            "‚ùóÔ∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –º–∞—Ç—á–∞!</b>‚ùóÔ∏è\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã:\n"
            "<code>12345</code>\n\n",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    match_id = int(match_id_text)
    
    # –ò—â–µ–º –º–∞—Ç—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö | Find match in database
    with Session(engine) as session:
        match = session.exec(
            select(MatchesSchema).where(MatchesSchema.match_id == match_id)
        ).first()
        
        if not match:
            await message.answer(
                f"‚ùóÔ∏è<b>–ú–∞—Ç—á #{match_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>‚ùóÔ∏è\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –º–∞—Ç—á–∞",
                parse_mode="HTML",
                reply_markup=get_cancel_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —ç—Ç–æ–º –º–∞—Ç—á–µ | Check if user participated in this match
        user = session.exec(
            select(UsersSchema).where(UsersSchema.telegram_id == message.from_user.id)
        ).first()
        
        if user:
            player_in_match = session.exec(
                select(MatchPlayersSchema).where(
                    MatchPlayersSchema.match_id == match_id,
                    MatchPlayersSchema.user_id == user.user_id
                )
            ).first()
            
            if not player_in_match:
                await message.answer(
                    f"‚ùå <b>–í—ã –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –º–∞—Ç—á–µ #{match_id}!</b>‚ùå\n\n"
                    f"–¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–∞—Ç—á–∞ –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                    parse_mode="HTML",
                    reply_markup=get_cancel_keyboard()
                )
                return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ | Save match data in state
        await state.update_data({
            "match_id": match_id,
            "map_name": match.map_name
        })
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è | Get players info for display
        players = session.exec(
            select(MatchPlayersSchema, UsersSchema, GameProfilesSchema)
            .join(UsersSchema, MatchPlayersSchema.user_id == UsersSchema.user_id)
            .join(GameProfilesSchema, UsersSchema.user_id == GameProfilesSchema.user_id)
            .where(MatchPlayersSchema.match_id == match_id)
        ).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ | Format match information
        match_info = (
            f"‚úÖ <b>–ú–ê–¢–ß #{match_id} –ù–ê–ô–î–ï–ù</b>\n"
            
            f"üó∫Ô∏è <b>–ö–∞—Ä—Ç–∞ </b> {match.map_name}\n"
            f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ </b> {len(players)}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ | Add players list
        match_info += "<b>–ò–≥—Ä–æ–∫–∏</b>\n"
        for match_player, user, profile in players:
            match_info += f"‚ñ´Ô∏è {profile.nickname} | –£–±–∏–π—Å—Ç–≤ | Kills: {match_player.kills}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ | Add photo upload instructions
        match_info += (
            f"\nüì∏ <b>–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞</b>\n"
            f"‚ñ´Ô∏è –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞\n"
            f"‚ñ´Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∫–∞–∫ —Ñ–æ—Ç–æ (–Ω–µ —Ñ–∞–π–ª)\n"
            f"‚ñ´Ô∏è –§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–∏–º –∏ —á–∏—Ç–∞–µ–º—ã–º\n\n"
            "‚ùóÔ∏è<b>–ó–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - –ø–æ–Ω–µ—Å–µ—Ç–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –≤ —Å–æ–æ—Ç–µ—Ç—Å—Ç–≤—É–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞</b>‚ùóÔ∏è",
        )
        
        await state.set_state(MatchRegistrationStates.waiting_for_photo)
        await message.answer(match_info, parse_mode="HTML", reply_markup=get_cancel_keyboard())

@router.message(MatchRegistrationStates.waiting_for_photo, F.content_type == ContentType.PHOTO)
async def process_match_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ | Process match result photo"""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è | Get data from state
    data = await state.get_data()
    match_id = data.get("match_id")
    map_name = data.get("map_name")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ | Get user information
    with Session(engine) as session:
        user = session.exec(
            select(UsersSchema).where(UsersSchema.telegram_id == message.from_user.id)
        ).first()
        
        if not user:
            await message.answer("‚ùóÔ∏è–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω‚ùóÔ∏è")
            await state.clear()
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ | Save photo
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ | Generate unique filename
        file_id = message.photo[-1].file_id
        file = await message.bot.get_file(file_id)
        file_extension = file.file_path.split('.')[-1] if '.' in file.file_path else 'jpg'
        
        unique_filename = f"match_{match_id}_{user.user_id}_{uuid.uuid4().hex[:8]}.{file_extension}"
        file_path = os.path.join(PHOTOS_DIR, unique_filename)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ | Download photo
        await message.bot.download_file(file.file_path, file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö | Save information to database
        with Session(engine) as session:
            new_photo = MatchPhotosSchema(
                match_id=match_id,
                user_id=user.user_id,
                photo_path=file_path,
                uploaded_at=datetime.now(moscow_tz),
                status="pending"
            )
            session.add(new_photo)
            session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ | Send confirmation
        await message.answer(
            f"‚úÖ <b>–§–û–¢–û –†–ï–ó–£–õ–¨–¢–ê–¢–ê –°–û–•–†–ê–ù–ï–ù–û!</b>\n"
            f"üéÆ <b>–ú–∞—Ç—á </b> #{match_id}\n"
            f"üó∫Ô∏è <b>–ö–∞—Ä—Ç–∞ </b> {map_name}\n"
            f"üë§ <b>–ó–∞–≥—Ä—É–∑–∏–ª </b> @{message.from_user.username or user.first_name}\n"
            f"üïí <b>–í—Ä–µ–º—è </b> {datetime.now(moscow_tz).strftime('%d.%m.%Y %H:%M')}\n\n"            
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!\n"
            "‚ùóÔ∏è<b>–ó–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - –ø–æ–Ω–µ—Å–µ—Ç–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –≤ —Å–æ–æ—Ç–µ—Ç—Å—Ç–≤—É–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞</b>‚ùóÔ∏è",
            parse_mode="HTML"
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ | Clear state
        await state.clear()
        
    except Exception as e:
        await message.answer(
            f"‚ùóÔ∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ!</b>‚ùóÔ∏è\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑\n\n"
            "‚ùóÔ∏è<b>–ó–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - –ø–æ–Ω–µ—Å–µ—Ç–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –≤ —Å–æ–æ—Ç–µ—Ç—Å—Ç–≤—É–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞</b>‚ùóÔ∏è",
            parse_mode="HTML",
            reply_markup=get_cancel_keyboard()
        )
        print(f"Error saving photo: {e}")

@router.message(MatchRegistrationStates.waiting_for_photo)
async def wrong_content_type(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ | Wrong content type handler"""
    await message.answer(
        "‚ùóÔ∏è <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!</b>‚ùóÔ∏è\n\n"
        "‚ñ´Ô∏è –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –º–∞—Ç—á–∞\n"
        "‚ñ´Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∫–∞–∫ <b>—Ñ–æ—Ç–æ</b> (–Ω–µ —Ñ–∞–π–ª)\n"
        "‚ñ´Ô∏è –§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–∏–º –∏ —á–∏—Ç–∞–µ–º—ã–º\n\n"
        "<i>–°—Ç–∏–∫–µ—Ä—ã, GIF, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è</i>\n\n"
        "‚ùóÔ∏è<b>–ó–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - –ø–æ–Ω–µ—Å–µ—Ç–µ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –≤ —Å–æ–æ—Ç–µ—Ç—Å—Ç–≤—É–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞</b>‚ùóÔ∏è",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )

@router.callback_query(F.data == "cancel_registration")
async def cancel_registration_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–Ω–æ–ø–∫–µ | Cancel registration callback handler"""
    current_state = await state.get_state()
    if current_state is None:
        await callback.answer("‚ùóÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏‚ùóÔ∏è")
        return
    
    await state.clear()
    await callback.message.edit_text(
        "‚ùå <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ç—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>‚ùå\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /match_register\n\n",
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(Command("cancel"))
async def cancel_registration_command(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π | Cancel registration by command"""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("‚ùóÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚ùóÔ∏è")
        return
    
    await state.clear()
    await message.answer(
        "‚ùå<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ç—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>‚ùå\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /match_register\n\n",
        parse_mode="HTML"
    )