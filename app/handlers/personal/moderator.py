'''
MODERATOR COMMANDS - FOR MODERATORS
'''

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from datetime import datetime, timedelta
from sqlmodel import Session, select
from database.models import engine, UsersSchema, UserBansSchema
from zoneinfo import ZoneInfo
import re

from utils.access_checker import is_moderator, find_user_by_identifier, can_ban_user

router = Router()
moscow_tz = ZoneInfo("Europe/Moscow")

async def ban_user(
        bot,
        user_id: int,
        banned_by_id: int,
        ban_type: str,
        reason: str,
        minutes: int,
    ):
    """–ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –õ–°"""
    with Session(engine) as session:
        user = session.exec(select(UsersSchema).where(UsersSchema.telegram_id == user_id)).first()
        banned_by_user = session.exec(select(UsersSchema).where(UsersSchema.telegram_id == banned_by_id)).first()
        
        if user and banned_by_user:
            unbanned_at = datetime.now(moscow_tz) + timedelta(minutes=minutes)
            
            new_ban = UserBansSchema(
                user_id=user.user_id,
                banned_by=banned_by_user.user_id,
                ban_type=ban_type,
                reason=reason,
                duration_minutes=minutes,
                banned_at=datetime.now(moscow_tz),
                unbanned_at=unbanned_at,
                is_active=True
            )
            session.add(new_ban)
            session.commit()
            
            try:
                ban_until = unbanned_at.strftime('%d.%m.%Y %H:%M')
                ban_message = (
                    f"üî¥ <b>–í–´ –ó–ê–ë–ê–ù–ï–ù–´</b>\n\n"
                    f"‚è∞ <b>–°—Ä–æ–∫:</b> {minutes} –º–∏–Ω—É—Ç\n"
                    f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
                    f"üïí <b>–†–∞–∑–±–∞–Ω:</b> {ban_until}\n\n"
                    f"–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                )
                await bot.send_message(chat_id=user_id, text=ban_message, parse_mode="HTML")
            except:
                pass

@router.message(Command("mod_ban"))
async def mod_ban_command(message: Message):
    """–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω (–º–æ–¥–µ—Ä–∞—Ç–æ—Ä) - –º–∞–∫—Å–∏–º—É–º 7 –¥–Ω–µ–π"""
    
    if not is_moderator(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ ‚ùå")
        return
    
    parts = message.text.split()
    if len(parts) < 4:
        await message.answer(
            "‚ùóÔ∏è <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>‚ùóÔ∏è\n\n"
            "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "<code>/mod_ban @username 24h –ø—Ä–∏—á–∏–Ω–∞</code>\n"
            "<code>/mod_ban 123456789 3d –ø—Ä–∏—á–∏–Ω–∞</code>\n\n"
            "<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:</b> 7 –¥–Ω–µ–π\n"
            "<b>–ï–¥–∏–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏:</b>\n"
            "‚Ä¢ <code>m</code> - –º–∏–Ω—É—Ç—ã (–º–∞–∫—Å 1440)\n"
            "‚Ä¢ <code>h</code> - —á–∞—Å—ã (–º–∞–∫—Å 168)\n"
            "‚Ä¢ <code>d</code> - –¥–Ω–∏ (–º–∞–∫—Å 7)",
            parse_mode="HTML"
        )
        return
    
    identifier = parts[1]
    time_string = parts[2].lower()
    reason = ' '.join(parts[3:])
    
    time_match = re.match(r'^(\d+)([mhd])$', time_string)
    if not time_match:
        await message.answer(
            "‚ùóÔ∏è<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏</b>‚ùóÔ∏è\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ <code>30m</code> - 30 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ <code>24h</code> - 24 —á–∞—Å–∞\n" 
            "‚Ä¢ <code>7d</code> - 7 –¥–Ω–µ–π",
            parse_mode="HTML"
        )
        return
    
    amount = int(time_match.group(1))
    unit = time_match.group(2)
    
    if unit == 'm':
        minutes = amount
        time_display = f"{amount}–º–∏–Ω"
        max_minutes = 1440  # 24 —á–∞—Å–∞
    elif unit == 'h':
        minutes = amount * 60
        time_display = f"{amount}—á"
        max_minutes = 10080  # 7 –¥–Ω–µ–π
    elif unit == 'd':
        minutes = amount * 24 * 60
        time_display = f"{amount}–¥–Ω"
        max_minutes = 10080  # 7 –¥–Ω–µ–π
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    if minutes > max_minutes:
        await message.answer(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n–ú–∞–∫—Å–∏–º—É–º: {max_minutes} –º–∏–Ω—É—Ç")
        return
    
    user, error = find_user_by_identifier(identifier)
    if error:
        await message.answer(error)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∑–∞–±–∞–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not can_ban_user(message.from_user.id, user):
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    await ban_user(
        message.bot,
        user.telegram_id,
        message.from_user.id,
        "moderator_ban",
        reason,
        minutes
    )
    
    ban_until = datetime.now(moscow_tz) + timedelta(minutes=minutes)
    
    await message.answer(
        f"üî¥ <b>–í–†–ï–ú–ï–ù–ù–´–ô –ë–ê–ù (–ú–û–î–ï–†–ê–¢–û–†)</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {identifier}\n"
        f"‚è∞ <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {time_display}\n"
        f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
        f"üëÆ <b>–ó–∞–±–∞–Ω–∏–ª:</b> @{message.from_user.username or '–º–æ–¥–µ—Ä–∞—Ç–æ—Ä'}\n"
        f"üïí <b>–î–æ:</b> {ban_until.strftime('%d.%m.%Y %H:%M')}\n\n",
        parse_mode="HTML"
    )

@router.message(Command("mod_warn"))
async def mod_warn_command(message: Message):
    """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    
    if not is_moderator(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ ‚ùå")
        return
    
    parts = message.text.split()
    if len(parts) < 3:
        await message.answer(
            "‚ùóÔ∏è<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>‚ùóÔ∏è\n\n"
            "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "<code>/mod_warn @username –ø—Ä–∏—á–∏–Ω–∞</code>\n"
            "<code>/mod_warn 123456789 –ø—Ä–∏—á–∏–Ω–∞</code>",
            parse_mode="HTML"
        )
        return
    
    identifier = parts[1]
    reason = ' '.join(parts[2:])
    
    user, error = find_user_by_identifier(identifier)
    if error:
        await message.answer(error)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if not can_ban_user(message.from_user.id, user):
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –≤—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –ë–î
    with Session(engine) as session:
        moderator = session.exec(select(UsersSchema).where(UsersSchema.telegram_id == message.from_user.id)).first()
        
        if user and moderator:
            new_warn = UserBansSchema(
                user_id=user.user_id,
                banned_by=moderator.user_id,
                ban_type="warning",
                reason=reason,
                duration_minutes=0,
                banned_at=datetime.now(moscow_tz),
                unbanned_at=None,
                is_active=False  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ –∫–∞–∫ –±–∞–Ω
            )
            session.add(new_warn)
            session.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –õ–°
    try:
        warn_message = (
            f"‚ö†Ô∏è <b>–í–´ –ü–û–õ–£–ß–ò–õ–ò –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï</b>\n\n"
            f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
            f"üëÆ <b>–í—ã–¥–∞–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä:</b> @{message.from_user.username or '–º–æ–¥–µ—Ä–∞—Ç–æ—Ä'}\n"
            f"üïí <b>–í—Ä–µ–º—è:</b> {datetime.now(moscow_tz).strftime('%d.%m.%Y %H:%M')}\n\n"
            f"<i>–ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –≤–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞</i>"
        )
        await message.bot.send_message(
            chat_id=user.telegram_id, 
            text=warn_message, 
            parse_mode="HTML"
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
        await message.answer(
            f"‚ö†Ô∏è <b>–í–´–î–ê–ù–û –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {identifier}\n"
            f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
            f"üëÆ <b>–í—ã–¥–∞–ª:</b> @{message.from_user.username or '–º–æ–¥–µ—Ä–∞—Ç–æ—Ä'}\n\n",
            # f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –≤ –õ–°",
            parse_mode="HTML"
        )
        
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–° | If massage dont send to user
        await message.answer(
            f"‚ö†Ô∏è <b>–í–´–î–ê–ù–û –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {identifier}\n"
            f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
            f"üëÆ <b>–í—ã–¥–∞–ª:</b> @{message.from_user.username or '–º–æ–¥–µ—Ä–∞—Ç–æ—Ä'}\n\n"
            f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –õ–° (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)</b>\n",
            parse_mode="HTML"
        )

@router.message(Command("mod_unban"))
async def mod_unban_command(message: Message):
    """–†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –±–∞–Ω—ã)"""
    
    if not is_moderator(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ ‚ùå")
        return
    
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer(
            "‚ùóÔ∏è <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>‚ùóÔ∏è\n\n"
            "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "<code>/mod_unban @username</code>\n"
            "<code>/mod_unban 123456789</code>",
            parse_mode="HTML"
        )
        return
    
    identifier = parts[1]
    
    with Session(engine) as session:
        user = session.exec(select(UsersSchema).where(UsersSchema.username == identifier)).first()
        if not user:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ ID
            user = session.exec(select(UsersSchema).where(UsersSchema.telegram_id == int(identifier))).first()
            if not user:
                await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        
        # –ù–∞—Ö–æ–¥–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        moderator = session.exec(select(UsersSchema).where(UsersSchema.telegram_id == message.from_user.id)).first()
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ –±–∞–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–¥–∞–ª —ç—Ç–æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
        active_bans = session.exec(select(UserBansSchema).where(
            UserBansSchema.user_id == user.user_id,
            UserBansSchema.is_active == True,
            UserBansSchema.banned_by == moderator.user_id
        )).all()
        
        if not active_bans:
            await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {identifier} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤ –æ—Ç –≤–∞—Å")
            return
        
        for ban in active_bans:
            ban.is_active = False
            ban.unbanned_by = moderator.user_id
            ban.unbanned_at_time = datetime.now(moscow_tz)
        
        session.commit()
        
        await message.answer(
            f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {identifier}\n"
            f"üëÆ <b>–†–∞–∑–±–∞–Ω–∏–ª:</b> @{message.from_user.username or '–º–æ–¥–µ—Ä–∞—Ç–æ—Ä'}\n"
            f"üïí <b>–í—Ä–µ–º—è:</b> {datetime.now(moscow_tz).strftime('%d.%m.%Y %H:%M')}",
            parse_mode="HTML"
        )