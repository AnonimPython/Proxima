'''
ADMIN COMMANDS - ONLY FOR ADMINS
'''

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from datetime import datetime, timedelta
from sqlmodel import Session, select
from database.models import engine, UsersSchema, UserBansSchema
from zoneinfo import ZoneInfo
import re
import os
from dotenv import load_dotenv

from utils.access_checker import is_admin, find_user_by_identifier, can_ban_user

load_dotenv()

router = Router()
moscow_tz = ZoneInfo("Europe/Moscow")

async def ban_user(
        bot,
        user_id: int,
        banned_by_id: int,
        ban_type: str,
        reason: str,
        minutes: int,
    ):
    """
    –ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –õ–°
    Bans user and sends notification to DM
    """
    with Session(engine) as session:
        user = session.exec(select(UsersSchema).where(UsersSchema.telegram_id == user_id)).first()
        banned_by_user = session.exec(select(UsersSchema).where(UsersSchema.telegram_id == banned_by_id)).first()
        
        if user and banned_by_user:
            unbanned_at = datetime.now(moscow_tz) + timedelta(minutes=minutes) if minutes > 0 else None
            
            new_ban = UserBansSchema(
                user_id=user.user_id,
                banned_by=banned_by_user.user_id,
                ban_type=ban_type,
                reason=reason,
                duration_minutes=minutes,
                banned_at=datetime.now(moscow_tz),
                unbanned_at=unbanned_at,
                is_active=True
            )
            session.add(new_ban)
            session.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
            try:
                if minutes > 0:
                    ban_until = unbanned_at.strftime('%d.%m.%Y %H:%M')
                    ban_message = (
                        f"üî¥ <b>–í–´ –ó–ê–ë–ê–ù–ï–ù–´</b>\n\n"
                        f"‚è∞ <b>–°—Ä–æ–∫:</b> {minutes} –º–∏–Ω—É—Ç\n"
                        f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
                        f"üïí <b>–†–∞–∑–±–∞–Ω:</b> {ban_until}\n\n"
                        f"–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                    )
                else:
                    ban_message = (
                        f"üî¥ <b>–í–´ –ó–ê–ë–ê–ù–ï–ù–´ –ù–ê–í–°–ï–ì–î–ê</b>\n\n"
                        f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n\n"
                        f"–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                    )
                await bot.send_message(chat_id=user_id, text=ban_message, parse_mode="HTML")
            except:
                pass
#! TEST
@router.message(Command("make_me_admin"))
async def make_me_admin(message: Message):
    """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        FOR TEST GIVE U ADMIN COMMANDS
    """
    admin_id = os.getenv('ADMIN_TELEGRAM_ID')
    
    if str(message.from_user.id) != admin_id:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã ‚ùå")
        return
    
    with Session(engine) as session:
        user_stmt = select(UsersSchema).where(UsersSchema.telegram_id == message.from_user.id)
        user = session.exec(user_stmt).first()
        
        if user:
            user.role = "admin"
            session.commit()
            await message.answer(
                "‚úÖ <b>–í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /admin_ban - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "‚Ä¢ /permaban - –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω\n"
                "‚Ä¢ /unban - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "‚Ä¢ /banlist - –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö\n"
                "‚Ä¢ /banhistory - –ò—Å—Ç–æ—Ä–∏—è –±–∞–Ω–æ–≤\n"
                "‚Ä¢ /make_moderator - –°–¥–µ–ª–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º",
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ‚ùóÔ∏è")

@router.message(Command("make_moderator"))
async def make_moderator_command(message: Message):
    """
    –°–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
    Admin can make user moderator 
    """
    
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ‚ùå")
        return
    
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer(
            "‚ùóÔ∏è <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b> ‚ùóÔ∏è\n\n"
            "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "<code>/make_moderator @username</code>\n"
            "<code>/make_moderator 123456789</code>",
            parse_mode="HTML"
        )
        return
    
    identifier = parts[1]
    
    user, error = find_user_by_identifier(identifier)
    if error:
        await message.answer(error)
        return
    
    with Session(engine) as session:
        user_to_promote = session.exec(select(UsersSchema).where(UsersSchema.user_id == user.user_id)).first()
        user_to_promote.role = "moderator"
        session.commit()
    
    await message.answer(
        f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {identifier}\n"
        f"üéØ <b>–ù–æ–≤–∞—è —Ä–æ–ª—å:</b> –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä\n"
        f"üëÆ <b>–ù–∞–∑–Ω–∞—á–∏–ª:</b> @{message.from_user.username or '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}\n\n"
        f"–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞",
        parse_mode="HTML"
    )

@router.message(Command("permaban"))
async def permaban_command(message: Message):
    """–ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ ‚ùå")
        return
    
    parts = message.text.split()
    if len(parts) < 3:
        await message.answer(
            "‚ùóÔ∏è <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b> ‚ùóÔ∏è\n\n"
            "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "<code>/permaban @username –ø—Ä–∏—á–∏–Ω–∞</code>\n"
            "<code>/permaban 123456789 –ø—Ä–∏—á–∏–Ω–∞</code>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/permaban @username –ß–∏—Ç—ã</code>\n"
            "<code>/permaban 123456789 –ß–∏—Ç—ã</code>",
            parse_mode="HTML"
        )
        return
    
    identifier = parts[1]
    reason = ' '.join(parts[2:])
    
    user, error = find_user_by_identifier(identifier)
    if error:
        await message.answer(error)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∞–¥–º–∏–Ω –∑–∞–±–∞–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not can_ban_user(message.from_user.id, user):
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # –ü–µ—Ä–º–∞–±–∞–Ω
    await ban_user(
        message.bot,
        user.telegram_id,
        message.from_user.id,
        "permanent_ban",
        reason,
        0
    )
    
    await message.answer(
        f"üî¥ <b>–ü–ï–†–ú–ê–ù–ï–ù–¢–ù–´–ô –ë–ê–ù</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {identifier}\n"
        f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
        f"üëÆ <b>–ó–∞–±–∞–Ω–∏–ª:</b> @{message.from_user.username or '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}\n"
        f"üïí <b>–¢–∏–ø:</b> –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π\n\n"
        f"‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞‚ùóÔ∏è",
        parse_mode="HTML"
    )

@router.message(Command("admin_ban"))
async def admin_ban_command(message: Message):
    """–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω (–∞–¥–º–∏–Ω)"""
    
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ ‚ùå")
        return
    
    parts = message.text.split()
    if len(parts) < 4:
        await message.answer(
            "‚ùóÔ∏è <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>‚ùóÔ∏è\n\n"
            "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "<code>/admin_ban @username 7d –ø—Ä–∏—á–∏–Ω–∞</code>\n"
            "<code>/admin_ban 123456789 30d –ø—Ä–∏—á–∏–Ω–∞</code>\n\n"
            "<b>–ï–¥–∏–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏:</b>\n"
            "‚Ä¢ <code>m</code> - –º–∏–Ω—É—Ç—ã\n"
            "‚Ä¢ <code>h</code> - —á–∞—Å—ã\n"
            "‚Ä¢ <code>d</code> - –¥–Ω–∏",
            parse_mode="HTML"
        )
        return
    
    identifier = parts[1]
    time_string = parts[2].lower()
    reason = ' '.join(parts[3:])
    
    time_match = re.match(r'^(\d+)([mhd])$', time_string)
    if not time_match:
        await message.answer(
            "‚ùóÔ∏è<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏</b>‚ùóÔ∏è\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ <code>30m</code> - 30 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ <code>24h</code> - 24 —á–∞—Å–∞\n" 
            "‚Ä¢ <code>7d</code> - 7 –¥–Ω–µ–π",
            parse_mode="HTML"
        )
        return
    
    amount = int(time_match.group(1))
    unit = time_match.group(2)
    
    if unit == 'm':
        minutes = amount
        time_display = f"{amount}–º–∏–Ω"
    elif unit == 'h':
        minutes = amount * 60
        time_display = f"{amount}—á"
    elif unit == 'd':
        minutes = amount * 24 * 60
        time_display = f"{amount}–¥–Ω"
    
    user, error = find_user_by_identifier(identifier)
    if error:
        await message.answer(error)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∞–¥–º–∏–Ω –∑–∞–±–∞–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not can_ban_user(message.from_user.id, user):
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    await ban_user(
        message.bot,
        user.telegram_id,
        message.from_user.id,
        "admin_temporary_ban",
        reason,
        minutes
    )
    
    ban_until = datetime.now(moscow_tz) + timedelta(minutes=minutes)
    
    await message.answer(
        f"üî¥ <b>–í–†–ï–ú–ï–ù–ù–´–ô –ë–ê–ù</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {identifier}\n"
        f"‚è∞ <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {time_display}\n"
        f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
        f"üëÆ <b>–ó–∞–±–∞–Ω–∏–ª:</b> @{message.from_user.username or '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}\n"
        f"üïí <b>–î–æ:</b> {ban_until.strftime('%d.%m.%Y %H:%M')}\n\n",
        parse_mode="HTML"
    )

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (unban, banlist, banhistory) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@router.message(Command("unban"))
async def unban_command(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã ‚ùå")
        return
    
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("‚ùå<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>‚ùå")
        return
    
    username = parts[1].replace('@', '')
    
    with Session(engine) as session:
        user = session.exec(select(UsersSchema).where(UsersSchema.username == username)).first()
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        unbanned_by_user = session.exec(select(UsersSchema).where(UsersSchema.telegram_id == message.from_user.id)).first()
        active_bans = session.exec(select(UserBansSchema).where(
            UserBansSchema.user_id == user.user_id,
            UserBansSchema.is_active == True
        )).all()
        
        if not active_bans:
            await message.answer(f"‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤")
            return
        
        for ban in active_bans:
            ban.is_active = False
            if unbanned_by_user:
                ban.unbanned_by = unbanned_by_user.user_id
            ban.unbanned_at_time = datetime.now(moscow_tz)
        
        session.commit()
        
        await message.answer(
            f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{username}\n"
            f"üëÆ <b>–†–∞–∑–±–∞–Ω–∏–ª:</b> @{message.from_user.username or '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}\n"
            f"üïí <b>–í—Ä–µ–º—è:</b> {datetime.now(moscow_tz).strftime('%d.%m.%Y %H:%M')}",
            parse_mode="HTML"
        )

# banlist –∏ banhistory –∫–æ–º–∞–Ω–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π