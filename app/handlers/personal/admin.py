'''
ADMIN COMMANDS - ONLY FOR ADMINS
'''

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from datetime import datetime, timedelta
from sqlmodel import Session, select
from database.models import engine, UsersSchema, UserBansSchema
from zoneinfo import ZoneInfo
import re
import os
from dotenv import load_dotenv

from utils.access_checker import is_admin, find_user_by_identifier

load_dotenv()

router = Router()
moscow_tz = ZoneInfo("Europe/Moscow")

async def ban_user(
        bot,
        user_id: int,
        banned_by_id: int,
        ban_type: str,
        reason: str,
        minutes: int,
    ):
    """
        –ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –õ–°
    """
    with Session(engine) as session:
        # –ù–∞—Ö–æ–¥–∏–º user_id –ø–æ telegram_id –¥–ª—è –±–∞–Ω–∏–º–æ–≥–æ
        user = session.exec(select(UsersSchema).where(UsersSchema.telegram_id == user_id)).first()
        
        # –ù–∞—Ö–æ–¥–∏–º  telegram_id –∞–¥–º–∏–Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –±–∞–Ω–∏—Ç—å
        banned_by_user = session.exec(select(UsersSchema).where(UsersSchema.telegram_id == banned_by_id)).first()
        
        if user and banned_by_user:
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–∑–±–∞–Ω–∞
            # Calculating the unban time
            unbanned_at = datetime.now(moscow_tz) + timedelta(minutes=minutes)
            
            new_ban = UserBansSchema(
                user_id=user.user_id,
                banned_by=banned_by_user.user_id,
                ban_type=ban_type,
                reason=reason,
                duration_minutes=minutes,
                banned_at=datetime.now(moscow_tz),
                unbanned_at=unbanned_at,
                is_active=True
            )
            session.add(new_ban)
            session.commit()
            
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
            # send a message to the banned player
            try:
                await bot.send_message(chat_id=user_id, text="–±–∞–Ω")
            except:
                pass
#! TEST
@router.message(Command("make_me_admin"))
async def make_me_admin(message: Message):
    """
        –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    admin_id = os.getenv('ADMIN_TELEGRAM_ID')
    
    if str(message.from_user.id) != admin_id:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã ‚ùå")
        return
    
    with Session(engine) as session:
        user_stmt = select(UsersSchema).where(UsersSchema.telegram_id == message.from_user.id)
        user = session.exec(user_stmt).first()
        
        if user:
            user.role = "admin"
            session.commit()
            await message.answer(
                "‚úÖ <b>–í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /admin_ban - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "‚Ä¢ /unban - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "‚Ä¢ /banlist - –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö\n"
                "‚Ä¢ /banhistory - –ò—Å—Ç–æ—Ä–∏—è –±–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n",
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ‚ùóÔ∏è")

@router.message(Command("permaban"))
async def permaban_command(message: Message):
    """–ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è | Permanent user ban"""
    
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ ‚ùå")
        return
    
    parts = message.text.split()
    if len(parts) < 3:
        await message.answer(
            "‚ùóÔ∏è <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b> ‚ùóÔ∏è\n\n"
            "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "<code>/permaban @username –ø—Ä–∏—á–∏–Ω–∞</code>\n"
            "<code>/permaban 123456789 –ø—Ä–∏—á–∏–Ω–∞</code>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/permaban @username –ß–∏—Ç—ã</code>\n"
            "<code>/permaban 123456789 –ß–∏—Ç—ã</code>",
            parse_mode="HTML"
        )
        return
    
    identifier = parts[1]
    reason = ' '.join(parts[2:])
    
    user, error = find_user_by_identifier(identifier)
    if error:
        await message.answer(error)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å | Check role
    if user.role in ["admin", "moderator"]:
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∞/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–µ—Ä–º–∞–±–∞–Ω | Permanent ban
    ban_user(
        user.telegram_id,
        message.from_user.id,
        "permanent_ban",
        reason,
        0  # 0 minutes = permanent
    )
    
    await message.answer(
        f"üî¥ <b>–ü–ï–†–ú–ê–ù–ï–ù–¢–ù–´–ô –ë–ê–ù</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {identifier}\n"
        f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
        f"üëÆ <b>–ó–∞–±–∞–Ω–∏–ª:</b> @{message.from_user.username or 'admin'}\n"
        f"üïí <b>–¢–∏–ø:</b> –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π\n\n"
        f"‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞‚ùóÔ∏è",
        parse_mode="HTML"
    )

@router.message(Command("admin_ban"))
async def admin_ban_command(message: Message):
    """–í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω (–∞–¥–º–∏–Ω) | Temporary ban (admin)"""
    
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ ‚ùå")
        return
    
    parts = message.text.split()
    if len(parts) < 4:
        await message.answer(
            "‚ùóÔ∏è <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>‚ùóÔ∏è\n\n"
            "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "<code>/admin_ban @username 7d –ø—Ä–∏—á–∏–Ω–∞</code>\n"
            "<code>/admin_ban 123456789 30d –ø—Ä–∏—á–∏–Ω–∞</code>\n\n"
            "<b>–ï–¥–∏–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏:</b>\n"
            "‚Ä¢ <code>m</code> - –º–∏–Ω—É—Ç—ã\n"
            "‚Ä¢ <code>h</code> - —á–∞—Å—ã\n"
            "‚Ä¢ <code>d</code> - –¥–Ω–∏",
            parse_mode="HTML"
        )
        return
    
    identifier = parts[1]
    time_string = parts[2].lower()
    reason = ' '.join(parts[3:])
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è | Parse time
    time_match = re.match(r'^(\d+)([mhd])$', time_string)
    if not time_match:
        await message.answer(
            "‚ùóÔ∏è<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏</b>‚ùóÔ∏è\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "‚Ä¢ <code>30m</code> - 30 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ <code>24h</code> -  24 —á–∞—Å–∞\n" 
            "‚Ä¢ <code>7d</code> - 7 –¥–Ω–µ–π",
            parse_mode="HTML"
        )
        return
    
    amount = int(time_match.group(1))
    unit = time_match.group(2)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω—É—Ç—ã | Convert to minutes
    if unit == 'm':
        minutes = amount
        time_display = f"{amount}–º–∏–Ω"
    elif unit == 'h':
        minutes = amount * 60
        time_display = f"{amount}—á"
    elif unit == 'd':
        minutes = amount * 24 * 60
        time_display = f"{amount}–¥–Ω"
    
    user, error = find_user_by_identifier(identifier)
    if error:
        await message.answer(error)
        return
    
    if user.role in ["admin", "moderator"]:
        await message.answer("‚ùóÔ∏è–ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∞/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞‚ùóÔ∏è")
        return
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω | Temporary ban
    await ban_user(
        message.bot,
        user.telegram_id,
        message.from_user.id,
        "admin_temporary_ban",
        reason,
        minutes
    )
    
    ban_until = datetime.now(moscow_tz) + timedelta(minutes=minutes)
    
    await message.answer(
        f"üî¥ <b>–í–†–ï–ú–ï–ù–ù–´–ô –ë–ê–ù</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {identifier}\n"
        f"‚è∞ <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {time_display}\n"
        f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
        f"üëÆ <b>–ó–∞–±–∞–Ω–∏–ª:</b> @{message.from_user.username or 'admin'}\n"
        f"üïí <b>–î–æ:</b> {ban_until.strftime('%d.%m.%Y %H:%M')}\n\n",
        parse_mode="HTML"
    )


@router.message(Command("unban"))
async def unmute_command(message: Message):
    
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã ‚ùå")
        return
    
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer(
            "‚ùå<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>‚ùå\n\n"
            "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "<code>/unban @username</code>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/unban @username</code>",
            parse_mode="HTML"
        )
        return
    
    username = parts[1].replace('@', '')
    
    with Session(engine) as session:
        user_stmt = select(UsersSchema).where(UsersSchema.username == username)
        user = session.exec(user_stmt).first()
        
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        unbanned_by_stmt = select(UsersSchema).where(UsersSchema.telegram_id == message.from_user.id)
        unbanned_by_user = session.exec(unbanned_by_stmt).first()
        
        ban_stmt = select(UserBansSchema).where(
            UserBansSchema.user_id == user.user_id,
            UserBansSchema.is_active == True
        )
        active_bans = session.exec(ban_stmt).all()
        
        if not active_bans:
            await message.answer(f"‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤")
            return
        
        for ban in active_bans:
            ban.is_active = False
            if unbanned_by_user:
                ban.unbanned_by = unbanned_by_user.user_id
            ban.unbanned_at_time = datetime.now(moscow_tz)
        
        session.commit()
        
        await message.answer(
            f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{username}\n"
            f"üëÆ <b>–†–∞–∑–±–∞–Ω–∏–ª:</b> @{message.from_user.username or '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}\n"
            f"üïí <b>–í—Ä–µ–º—è:</b> {datetime.now(moscow_tz).strftime('%d.%m.%Y %H:%M')}\n\n",
            parse_mode="HTML"
        )
#! not wokring at this time
@router.message(Command("banlist"))
async def banlist_command(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤"""
    
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    with Session(engine) as session:
        from datetime import datetime
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        ban_stmt = select(UserBansSchema, UsersSchema).join(
            UsersSchema, UserBansSchema.user_id == UsersSchema.user_id
        ).where(
            UserBansSchema.is_active == True
        )
        results = session.exec(ban_stmt).all()
        
        if not results:
            await message.answer("üìã <b>–°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤ –ø—É—Å—Ç</b>\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤", parse_mode="HTML")
            return
        
        ban_list = "üìã <b>–ê–ö–¢–ò–í–ù–´–ï –ë–ê–ù–´</b>\n\n"
        current_time = datetime.now(moscow_tz)
        has_active_bans = False
        
        for ban, user in results:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –±–∞–Ω—ã –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏—Ö
            if ban.unbanned_at <= current_time:
                ban.is_active = False
                session.commit()
                continue
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            time_left = ban.unbanned_at - current_time
            minutes_left = int(time_left.total_seconds() / 60)
            hours_left = int(minutes_left / 60)
            
            if hours_left > 24:
                days = hours_left // 24
                hours = hours_left % 24
                time_display = f"{days}–¥ {hours}—á"
            elif hours_left > 0:
                time_display = f"{hours_left}—á {minutes_left % 60}–º"
            else:
                time_display = f"{minutes_left}–º"
            
            ban_list += (
                f"üë§ <b>@{user.username or user.first_name}</b>\n"
                f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {time_display}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {ban.reason}\n"
                f"üïí –†–∞–∑–±–∞–Ω: {ban.unbanned_at.strftime('%d.%m %H:%M')}\n"
                f"üëÆ –ó–∞–±–∞–Ω–∏–ª: ID {ban.banned_by}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )
            has_active_bans = True
        
        if not has_active_bans:
            await message.answer("üìã <b>–°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤ –ø—É—Å—Ç</b>\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–Ω–æ–≤", parse_mode="HTML")
        else:
            await message.answer(ban_list, parse_mode="HTML")

@router.message(Command("banhistory"))
async def banhistory_command(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –±–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer(
            "‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
            "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n"
            "<code>/banhistory @username</code>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>/banhistory @username</code>",
            parse_mode="HTML"
        )
        return
    
    username = parts[1].replace('@', '')
    
    with Session(engine) as session:
        user_stmt = select(UsersSchema).where(UsersSchema.username == username)
        user = session.exec(user_stmt).first()
        
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        ban_stmt = select(UserBansSchema).where(
            UserBansSchema.user_id == user.user_id
        ).order_by(UserBansSchema.banned_at.desc()).limit(10)
        
        bans = session.exec(ban_stmt).all()
        
        if not bans:
            await message.answer(f"üìã <b>–ò—Å—Ç–æ—Ä–∏—è –±–∞–Ω–æ–≤ @{username}</b>\n\n–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –±–∞–Ω–∞—Ö", parse_mode="HTML")
            return
        
        history = f"üìã <b>–ò–°–¢–û–†–ò–Ø –ë–ê–ù–û–í @{username}</b>\n\n"
        
        for ban in bans:
            status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if ban.is_active else "üî¥ –°–Ω—è—Ç"
            duration = f"{ban.duration_minutes}–º"
            if ban.duration_minutes >= 1440:
                duration = f"{ban.duration_minutes // 1440}–¥"
            elif ban.duration_minutes >= 60:
                duration = f"{ban.duration_minutes // 60}—á"
            
            history += (
                f"üìÖ {ban.banned_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n"
                f"üìù –ü—Ä–∏—á–∏–Ω–∞: {ban.reason}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            )
            
            if not ban.is_active and ban.unbanned_at_time:
                history += f"–°–Ω—è—Ç: {ban.unbanned_at_time.strftime('%d.%m.%Y %H:%M')}\n"
            
            history += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        
        await message.answer(history, parse_mode="HTML")