'''
FILE FOR WORK WITH CREATING MATCHES AND REGISTER THEM
'''

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
import random
import asyncio
import json
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from sqlmodel import Session, select
from database.models import engine, UsersSchema, GameProfilesSchema, MatchesSchema, FoundMatchSchema, UserBansSchema

router = Router()
moscow_tz = ZoneInfo("Europe/Moscow")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–±–±–∏
active_lobbies = {}
'''
# –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–¥–Ω–æ–≥–æ –ª–æ–±–±–∏ | Example of one lobby structure:
# active_lobbies["1"] = {
#     'players': ["Player1", "Player2", "Player3"],  # –ù–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ | Player nicknames
#     'player_ids': [123, 456, 789],                 # Telegram ID –∏–≥—Ä–æ–∫–æ–≤ | Player Telegram IDs
#     'player_profiles': {                           # –ü—Ä–æ—Ñ–∏–ª–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –ë–î | Player profiles from DB
#         123: GameProfilesSchema_object,
#         456: GameProfilesSchema_object
#     },
#     'status': 'waiting',                           # –°—Ç–∞—Ç—É—Å –ª–æ–±–±–∏ | Lobby status
#     'captains': [123, 456],                        # ID –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ | Captain IDs
#     'messages': [                                  # –°–æ–æ–±—â–µ–Ω–∏—è —É –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ | Messages for each player
#         {
#             'user_id': 123,
#             'message_id': 1001,
#             'chat_id': 123456789
#         },
#         {
#             'user_id': 456, 
#             'message_id': 1002,
#             'chat_id': 987654321
#         }
#     ]
# }
'''


map_selections = {}


# –ü—Ä–æ–≤–µ—Ä–∫–∞ - –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–µ—Ç
# Bot check have a user ban or not
def is_user_banned(user_id: int) -> bool:
    try:
        # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        # opening a session with the database
        with Session(engine) as session:
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É—Å–ª–æ–≤–∏–µ–º –ø–æ telegram_id
            # creating a query to UsersSchema filtered by telegram_id
            user_stmt = select(UsersSchema).where(UsersSchema.telegram_id == user_id)
            # –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å, –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥–µ–Ω
            # executing the query and fetching the first user if found
            user = session.exec(user_stmt).first()
            
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False (–Ω–µ –∑–∞–±–∞–Ω–µ–Ω)
            # if user is not found, return False (not banned)
            if not user:
                return False
                
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ –±–∞–Ω–æ–≤ —Å —É—Å–ª–æ–≤–∏–µ–º –ø–æ user_id –∏ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—É
            # creating a query to UserBansSchema filtering by user_id and active status
            ban_stmt = select(UserBansSchema).where(
                # –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–¥ –±–∞–Ω—ã
                # find the user in the database reserved for bans
                UserBansSchema.user_id == user.user_id,
                # –∏ –µ—Å–ª–∏ –º—ã –Ω–∞—à–ª–∏ –∏–≥—Ä–æ–∫–∞ —É –∫–æ—Ç–æ—Ä–æ–≥–æ –±–∞–Ω True, —Ç–æ –µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è –∏–≥—Ä–∞—Ç—å
                # and if we find a player with a True ban, then he is automatically banned from playing
                UserBansSchema.is_active == True
            )
            # –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å, –ø–æ–ª—É—á–∞–µ–º —Å–∞–º—É—é –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –±–∞–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            # executing the query and fetching the first active ban record if exists
            active_ban = session.exec(ban_stmt).first()
            
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –±–∞–Ω –∏ –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ —Å—Ä–æ–∫ –±–∞–Ω–∞
            # checking if there is an active ban and if ban period has not expired
            if active_ban and active_ban.unbanned_at > datetime.now(moscow_tz):
                # –µ—Å–ª–∏ –±–∞–Ω –∞–∫—Ç–∏–≤–µ–Ω –ø–æ –¥–∞—Ç–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
                # if ban is active by expiration date, return True
                return True
            # –µ—Å–ª–∏ –±–∞–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
            # if ban is absent or expired, return False
            return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–Ω–∞: {e}")
        return False

def ban_user(user_id: int, ban_type: str = "lobby_leave", reason: str = "–í—ã—Ö–æ–¥ –∏–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –ª–æ–±–±–∏", minutes: int = 1): #! for test set 1 minute ban
    # –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    # opening a session with the database
    with Session(engine) as session:
        user_stmt = select(UsersSchema).where(UsersSchema.telegram_id == user_id)
        user = session.exec(user_stmt).first()
        
        if user:
            # –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±–∞–Ω–æ–≤ (—Ç–∏–ø–∞ lobby_leave) banned_by —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∫–∞–∫ ID —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # for automatic bans (like lobby_leave) banned_by is set as the user's own ID
            
            # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º banned_by ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # assigning banned_by the ID of the current user
            banned_by = user.user_id
            
            # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö UserBansSchema
            # creating a new object in UserBansSchema
            new_ban = UserBansSchema(
                user_id=user.user_id,
                banned_by=banned_by,
                ban_type=ban_type,
                reason=reason,
                duration_minutes=minutes,
                unbanned_at=datetime.now(moscow_tz) + timedelta(minutes=minutes)
            )
            session.add(new_ban)
            session.commit()

def get_lobby_player_count(lobby_number: str) -> int:
    """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –ª–æ–±–±–∏
        Gets the actual number of players in the lobby
    """
    lobby_data = active_lobbies.get(lobby_number, {})
    return len(lobby_data.get('players', []))

async def update_lobby_messages(
        bot,
        lobby_number: str,
        is_full: bool = False,
        captain_nicknames: list = None,
    ):
    # –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ | Current player count
    lobby_data = active_lobbies.get(lobby_number)
    if not lobby_data:
        return
    
    current_players = len(lobby_data['players'])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –í—ã–π—Ç–∏
    cancel_builder = InlineKeyboardBuilder()
    cancel_builder.button(text="‚ùå –í—ã–π—Ç–∏ –∏–∑ –ª–æ–±–±–∏", callback_data=f"leave_lobby_{lobby_number}")
    
    # –°–û–ó–î–ê–ï–ú –¢–ï–ö–°–¢ –°–û–û–ë–©–ï–ù–ò–Ø
    # CREATE MESSAGE TEXT
    if is_full and captain_nicknames:
        # –¢–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –ª–æ–±–±–∏
        # Text for full lobby
        message_text = (
            f"üéØ <b>Lobby {lobby_number} –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!</b>\n\n"
            f"üë• <b>–ò–≥—Ä–æ–∫–∏ –≤ –ª–æ–±–±–∏ (10/10):</b>\n"
            + "\n".join([f"‚Ä¢ {player}" for player in lobby_data['players']]) +
            f"\n\nüëë <b>–í–´–ë–†–ê–ù–´ 2 –ö–ê–ü–ò–¢–ê–ù–ê:</b>\n"
            f"‚Ä¢ {captain_nicknames[0]} (–ö–æ–º–∞–Ω–¥–∞ –ê)\n"
            f"‚Ä¢ {captain_nicknames[1]} (–ö–æ–º–∞–Ω–¥–∞ –ë)\n\n"
            f"<i>–ù–∞—á–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç...</i>"
        )
    else:
        # –¢–µ–∫—Å—Ç –¥–ª—è –ª–æ–±–±–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
        # Text for waiting lobby
        message_text = (
            f"üéØ <b>Lobby {lobby_number} –≤—ã–±—Ä–∞–Ω–æ</b>\n\n"
            f"üë• <b>–ò–≥—Ä–æ–∫–∏ –≤ –ª–æ–±–±–∏ ({current_players}/10):</b>\n"
            + "\n".join([f"‚Ä¢ {player}" for player in lobby_data['players']]) +
            f"\n\nüïê –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤..."
        )
    
    # –û–ë–ù–û–í–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–Ø –£ –ö–ê–ñ–î–û–ì–û –ò–ì–†–û–ö–ê
    # UPDATE MESSAGES FOR EACH PLAYER
    for message_info in lobby_data.get('messages', []):
        try:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            # Edit each player's message
            await bot.edit_message_text(
                # –ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
                # Where to send
                chat_id=message_info['chat_id'], 
                # –ö–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                # Which message to edit
                message_id=message_info['message_id'], 
                text=message_text, # –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç | New text
                reply_markup=cancel_builder.as_markup(), # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ | Keyboard
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è user_id {message_info['user_id']}: {e}")

async def update_lobby_list(bot):
    """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–æ–±–±–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        Refreshes the lobby list for all users.
    """

    #! TEST
    # –î–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    # For test use logging 
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –ª–æ–±–±–∏:")
    for lobby_num in range(1, 5):
        count = get_lobby_player_count(str(lobby_num))
        print(f"Lobby {lobby_num}: {count}/10 –∏–≥—Ä–æ–∫–æ–≤")

@router.message(Command("lobby"))
async def lobby_handler(message: Message):
    """
        –ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–±–±–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–¥—Å—á–µ—Ç–æ–º –∏–≥—Ä–æ–∫–æ–≤
        Showing available lobbies with real player counts
    """
    
    user_id = message.from_user.id
    
    # –ü–†–û–í–ï–†–Ø–ï–ú –í–°–ï –õ–û–ë–ë–ò - –≤ –∫–∞–∫–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    # CHECK ALL LOBBIES - which one the user is in
    user_current_lobby = None
    for lobby_number, lobby_data in active_lobbies.items():
        # –ò—â–µ–º user_id –≤ —Å–ø–∏—Å–∫–µ player_ids –ª–æ–±–±–∏
        # Search for user_id in lobby's player_ids list
        if user_id in lobby_data.get('player_ids', []):
            user_current_lobby = lobby_number
            break
    
    # –ï–°–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–ñ–ï –í –õ–û–ë–ë–ò - –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ–≥–æ
    # IF USER IS ALREADY IN LOBBY - leave it
    if user_current_lobby:
        lobby_data = active_lobbies[user_current_lobby]
        
        # –£–î–ê–õ–Ø–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò–ó –°–ü–ò–°–ö–ê –ò–ì–†–û–ö–û–í
        # REMOVE USER FROM PLAYER LIST
        if user_id in lobby_data['player_ids']:
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ
            # Find user index in the list
            index = lobby_data['player_ids'].index(user_id)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–±–æ–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –ø–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º—É –∏–Ω–¥–µ–∫—Å—É
            # Remove from both lists by same index
            lobby_data['players'].pop(index)    # –£–¥–∞–ª—è–µ–º –Ω–∏–∫ | Remove nickname
            lobby_data['player_ids'].pop(index) # –£–¥–∞–ª—è–µ–º ID | Remove ID
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            # Remove user's message from messages list
            lobby_data['messages'] = [msg for msg in lobby_data.get('messages', []) if msg['user_id'] != user_id]
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∫–∞–ø–∏—Ç–∞–Ω–æ–º, –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–≥–æ
            if user_id in lobby_data.get('captains', []):
                available_players = [pid for pid in lobby_data['player_ids'] if pid != user_id]
                if available_players:
                    lobby_data['captains'] = random.sample(available_players, min(2, len(available_players)))
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç –µ—Å–ª–∏ –ª–æ–±–±–∏ –ø—É—Å—Ç–æ–µ
            if len(lobby_data.get('players', [])) == 0:
                if user_current_lobby in active_lobbies:
                    del active_lobbies[user_current_lobby]
                if user_current_lobby in map_selections:
                    del map_selections[user_current_lobby]
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤
                await update_lobby_messages(message.bot, user_current_lobby)
        
        await message.answer(
            "‚ö†Ô∏è <b>–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ª–æ–±–±–∏</b>\n\n"
            f"–í—ã –≤—ã—à–ª–∏ –∏–∑ Lobby {user_current_lobby}, —Ç–∞–∫ –∫–∞–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É /lobby",
            parse_mode="HTML"
        )
    
    # –ü–†–û–í–ï–†–Ø–ï–ú –ë–ê–ù (–ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ª–æ–±–±–∏)
    # check ban user or not
    if is_user_banned(user_id):
        await message.answer(
            "üö´ <b>–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!</b>\n\n"
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –ª–æ–±–±–∏ –¥–æ —Å–Ω—è—Ç–∏—è –±–∞–Ω–∞\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞",
            parse_mode="HTML"
        )
        return
    
    # –ü–û–õ–£–ß–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ï –°–ß–ï–¢–ß–ò–ö–ò –ò–ì–†–û–ö–û–í –î–õ–Ø –ö–ê–ñ–î–û–ì–û –õ–û–ë–ë–ò
    # GET REAL PLAYER COUNTS FOR EACH LOBBY
    builder = InlineKeyboardBuilder()
    
    # –†–µ–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
    lobby_1_count = get_lobby_player_count("1") # –°—á–∏—Ç–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –ª–æ–±–±–∏ 1 | Counts players in lobby 1
    lobby_2_count = get_lobby_player_count("2")
    lobby_3_count = get_lobby_player_count("3") 
    lobby_4_count = get_lobby_player_count("4")
    
    # –°–û–ó–î–ê–ï–ú –ö–ù–û–ü–ö–ò –î–õ–Ø –ö–ê–ñ–î–û–ì–û –õ–û–ë–ë–ò
    # CREATE BUTTONS FOR EACH LOBBY
    for lobby_num, count in [
        (1, lobby_1_count), 
        (2, lobby_2_count),
        (3, lobby_3_count),
        (4, lobby_4_count),
    ]:
        # –ï—Å–ª–∏ –≤ –ª–æ–±–±–∏ –±–æ–ª–µ–µ 10 —á–µ–ª–æ–≤–µ–∫ - –º—ã –±–ª–æ–∫–∏—Ä—É–µ–º –ª–æ–±–±–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
        # if lobby take 10 players in - we are block lobby and send notification about it
        if count >= 10:
            builder.button(
                text=f"üéÆ Lobby {lobby_num} ‚Ä¢ 10/10 üîí",
                callback_data=f"lobby_full_{lobby_num}",
            )
        # –ï—Å–ª–∏ –∂–µ –ª–æ–±–±–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–º
        # if lobby are not full - player can connect in
        else:
            builder.button(
                text=f"üéÆ Lobby {lobby_num} ‚Ä¢ {count}/10",
                callback_data=f"join_lobby_{lobby_num}",
            )
    
    builder.adjust(2)
    
    # –û–ø–∏—Å–∞–Ω–∏—è –ª–æ–±–±–∏
    lobby_descriptions = {
        1: "–†–∞–Ω–≥–æ–≤—ã–π –º–∞—Ç—á",
        2: "–†–∞–Ω–≥–æ–≤—ã–π –º–∞—Ç—á",
        3: "–†–∞–Ω–≥–æ–≤—ã–π –º–∞—Ç—á",
        4: "–†–∞–Ω–≥–æ–≤—ã–π –º–∞—Ç—á",
    }
    
    lobby_text = "üèüÔ∏è <b>–î–û–°–¢–£–ü–ù–´–ï –õ–û–ë–ë–ò</b>\n\n"
    
    for lobby_num in range(1, 5):
        count = get_lobby_player_count(str(lobby_num))
        status = "üîí –ó–ê–ü–û–õ–ù–ï–ù–û" if count >= 10 else "üü¢ –û–¢–ö–†–´–¢–û"
        lobby_text += f"üéØ <b>Lobby {lobby_num}</b> ‚Ä¢ {lobby_descriptions[lobby_num]} ‚Ä¢ {status}\n"
        lobby_text += f"üë• {count}/10 —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤\n\n"
    
    lobby_text += "<i>–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–±–±–∏ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</i>"
    
    await message.answer(
        lobby_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("lobby_full_"))
async def handle_lobby_full(callback: CallbackQuery):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–±–±–∏
        Blocked lobby handler
    """
    await callback.answer("‚ùå –≠—Ç–æ –ª–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.", show_alert=True)

@router.callback_query(F.data.startswith("join_lobby_"))
async def handle_lobby_join(callback: CallbackQuery, state: FSMContext):
    # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ª–æ–±–±–∏ –∏–∑ callback_data 
    # get lobby number from callback_data
    lobby_number = callback.data.split("_")[2] 
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    if is_user_banned(user_id):
        await callback.answer("üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã! –ë–∞–Ω –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É", show_alert=True)
        return
    
    await callback.message.delete()
    
    with Session(engine) as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stmt = select(UsersSchema).where(UsersSchema.telegram_id == user_id)
        user = session.exec(user_stmt).first()
        
        if user:
            profile_stmt = select(GameProfilesSchema).where(GameProfilesSchema.user_id == user.user_id)
            user_profile = session.exec(profile_stmt).first()
            current_user_nickname = user_profile.nickname if user_profile else user.first_name
        else:
            current_user_nickname = callback.from_user.first_name or "–ò–≥—Ä–æ–∫"

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–±–±–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    # Initialize lobby if it doesn't exist
    if lobby_number not in active_lobbies:
        active_lobbies[lobby_number] = {
            'players': [],          # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –Ω–∏–∫–æ–≤ | Empty nickname list
            'player_ids': [],       # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ ID | Empty ID list  
            'player_profiles': {},  # –ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ—Ñ–∏–ª–µ–π | Empty profiles dict
            'status': 'waiting',    # –°—Ç–∞—Ç—É—Å "–æ–∂–∏–¥–∞–Ω–∏–µ" | "Waiting" status
            'captains': [],         # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ | Empty captains list
            'messages': []          # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π | Empty messages list
        }
    
    lobby_data = active_lobbies[lobby_number]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –ª–æ–±–±–∏
    # Check if the lobby is full
    if len(lobby_data['players']) >= 10:
        await callback.message.answer("‚ùå –õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –ª–æ–±–±–∏ –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    # Check if the user is already in the lobby
    if user_id in lobby_data['player_ids']:
        await callback.message.answer("‚ùå –í—ã —É–∂–µ –≤ —ç—Ç–æ–º –ª–æ–±–±–∏!")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–±–±–∏
    # Add a user to the lobby
    lobby_data['players'].append(current_user_nickname) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∫ | Add nickname
    lobby_data['player_ids'].append(user_id)            # –î–æ–±–∞–≤–ª—è–µ–º ID | Add ID
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # Save the user profile
    if user and user_profile:
        lobby_data['player_profiles'][user_id] = user_profile
    
    current_players = len(lobby_data['players'])
    
    cancel_builder = InlineKeyboardBuilder()
    cancel_builder.button(text="‚ùå –í—ã–π—Ç–∏ –∏–∑ –ª–æ–±–±–∏", callback_data=f"leave_lobby_{lobby_number}")
    
    lobby_message = await callback.message.answer(
        f"üéØ <b>Lobby {lobby_number} –≤—ã–±—Ä–∞–Ω–æ</b>\n\n"
        f"üë• <b>–ò–≥—Ä–æ–∫–∏ –≤ –ª–æ–±–±–∏ ({current_players}/10):</b>\n"
        + "\n".join([f"‚Ä¢ {player}" for player in lobby_data['players']]) +
        f"\n\n‚úÖ <b>–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫–∞–∫:</b> {current_user_nickname}\n"
        f"üïê –û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...",
        reply_markup=cancel_builder.as_markup(),
        parse_mode="HTML"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # Save message for this user
    lobby_data['messages'].append({
        'user_id': user_id,                     # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è | User ID
        'message_id': lobby_message.message_id, # ID —Å–æ–æ–±—â–µ–Ω–∏—è | Message ID
        'chat_id': lobby_message.chat.id        # ID —á–∞—Ç–∞ | Chat ID
    })
    
    # –û–ë–ù–û–í–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–Ø –£ –í–°–ï–• –ò–ì–†–û–ö–û–í –í –õ–û–ë–ë–ò
    await update_lobby_messages(callback.bot, lobby_number)
    
    # –û–ë–ù–û–í–õ–Ø–ï–ú –°–ü–ò–°–û–ö –õ–û–ë–ë–ò –î–õ–Ø –í–°–ï–•
    await update_lobby_list(callback.bot)
    
    # –ï—Å–ª–∏ –ª–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç
    if current_players >= 10:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –∏–∑ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        captains = random.sample(lobby_data['player_ids'], 2)
        lobby_data['captains'] = captains
        lobby_data['status'] = 'full'
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤
        captain_nicknames = []
        for captain_id in captains:
            if captain_id in lobby_data['player_profiles']:
                captain_nicknames.append(lobby_data['player_profiles'][captain_id].nickname)
            else:
                captain_nicknames.append(f"–ò–≥—Ä–æ–∫ {captain_id}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤—ã–±–æ—Ä–µ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –í–°–ï–• –∏–≥—Ä–æ–∫–æ–≤
        await update_lobby_messages(callback.bot, lobby_number, is_full=True, captain_nicknames=captain_nicknames)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ)
        if lobby_data['messages']:
            first_message = lobby_data['messages'][0]
            try:
                message_obj = await callback.bot.edit_message_text(
                    chat_id=first_message['chat_id'],
                    message_id=first_message['message_id'],
                    text=f"üéØ <b>Lobby {lobby_number} –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!</b>\n\n"
                         f"üë• <b>–ò–≥—Ä–æ–∫–∏ –≤ –ª–æ–±–±–∏ (10/10):</b>\n"
                         + "\n".join([f"‚Ä¢ {player}" for player in lobby_data['players']]) +
                         f"\n\nüëë <b>–í–´–ë–†–ê–ù–´ 2 –ö–ê–ü–ò–¢–ê–ù–ê:</b>\n"
                         f"‚Ä¢ {captain_nicknames[0]} (–ö–æ–º–∞–Ω–¥–∞ –ê)\n"
                         f"‚Ä¢ {captain_nicknames[1]} (–ö–æ–º–∞–Ω–¥–∞ –ë)\n\n"
                         f"<i>–ù–∞—á–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ä—Ç...</i>",
                    parse_mode="HTML"
                )
                await start_map_selection(message_obj, lobby_number)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç: {e}")

async def start_map_selection(message: Message, lobby_number: str):
    """
        –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç
        Starting the card selection process
    """
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–±–±–∏ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É
    # Get lobby data by its number
    lobby_data = active_lobbies[lobby_number]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ª–æ–±–±–∏
    # Initialize map selection process for this lobby
    map_selections[lobby_number] = {
        'captains': lobby_data['captains'], # –°–ø–∏—Å–æ–∫ ID –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ | List of captain IDs
        # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞ (0 –∏–ª–∏ 1)
        # Current captain index (0 or 1)
        'current_turn': 0, 
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã 
        # Available maps
        'available_maps': ["Sandstone", "Breeze", "Dune", "Hanami", "Province", "Rust", "Zone 7"],
        'banned_maps': [],   # –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç | List of banned maps
        'message': message,  # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è | Message for editing
    }
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç - –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    # Show map selection interface - keyboard
    await show_map_selection_interface(message, lobby_number)

async def show_map_selection_interface(message: Message, lobby_number: str):
    """
        –ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç
        Showing the card selection interface
    """
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç –¥–ª—è –ª–æ–±–±–∏
    # Get map selection data for the lobby
    selection_data = map_selections.get(lobby_number)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–±–±–∏
    # Get lobby data
    lobby_data = active_lobbies.get(lobby_number, {})
    
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤—ã—Ö–æ–¥–∏–º
    # If no data, exit
    if not selection_data:
        return
    
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–∞—Ä—Ç—ã
    # Add buttons for each available map
    for map_name in selection_data['available_maps']:
        builder.button(text=f"üó∫Ô∏è {map_name}", callback_data=f"ban_map_{lobby_number}_{map_name}")
    
    
    builder.button(text="‚ùå –í—ã–π—Ç–∏", callback_data=f"leave_lobby_{lobby_number}")
    builder.adjust(2)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∏–º–µ–Ω–∞–º–∏ –∫–∞–ø–∏—Ç–∞–Ω–æ–≤
    # Create dictionary with captain names
    captain_names = {}
    for captain_id in selection_data['captains']:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∫–∞–ø–∏—Ç–∞–Ω–∞ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö –ª–æ–±–±–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∏–∫
        # If captain profile exists in lobby data, use their nickname
        if captain_id in lobby_data.get('player_profiles', {}):
            captain_names[captain_id] = lobby_data['player_profiles'][captain_id].nickname
        # –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º generic –∏–º—è #! —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∑–∞–π—Ç–∏ –≤ –ª–æ–±–±–∏
        # Otherwise create generic name
        else:
            captain_names[captain_id] = f"–ò–≥—Ä–æ–∫ {captain_id}"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –∏ –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞
    # Determine current captain ID and name
    current_captain_id = selection_data['captains'][selection_data['current_turn']]
    current_captain_name = captain_names.get(current_captain_id, "–ö–∞–ø–∏—Ç–∞–Ω")
    
    status_text = (
        f"üèÜ <b>–í—ã–±–æ—Ä –∫–∞—Ä—Ç - –õ–æ–±–±–∏ {lobby_number}</b>\n\n"
        f"üëë <b>–ö–∞–ø–∏—Ç–∞–Ω—ã:</b>\n"
        f"‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ –ê: {captain_names[selection_data['captains'][0]]}\n"
        f"‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ –ë: {captain_names[selection_data['captains'][1]]}\n\n"
        f"üéØ <b>–°–µ–π—á–∞—Å –≤—ã–±–∏—Ä–∞–µ—Ç:</b> {current_captain_name}\n"
        f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã:</b> {', '.join(selection_data['available_maps'])}\n"
        f"üö´ <b>–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:</b> {', '.join(selection_data['banned_maps']) or '–Ω–µ—Ç'}\n\n"
        f"<i>–ö–∞–ø–∏—Ç–∞–Ω—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∏—Å–∫–ª—é—á–∞—é—Ç –∫–∞—Ä—Ç—ã</i>"
    )
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    # Try to edit message with new interface
    try:
        await message.edit_text(status_text, reply_markup=builder.as_markup(), parse_mode="HTML")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@router.callback_query(F.data.startswith("ban_map_"))
async def handle_map_ban(callback: CallbackQuery):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
        Map exception handler
    """
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data –Ω–∞ —á–∞—Å—Ç–∏
    # Parse callback_data into parts
    data_parts = callback.data.split("_")
    lobby_number = data_parts[2]     # –ù–æ–º–µ—Ä –ª–æ–±–±–∏ | Lobby number
    map_name = data_parts[3]         # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã | Map name
    user_id = callback.from_user.id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è | User ID
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç
    # Get map selection data
    selection_data = map_selections.get(lobby_number)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ–±–±–∏
    # Check if data exists about lobby
    if not selection_data:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ª–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞
    # Get current captain ID
    current_captain_id = selection_data['captains'][selection_data['current_turn']]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–Ω
    # Verify that action is performed by current captain
    if user_id != current_captain_id:
        await callback.answer("‚ùå –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –≤—ã–±–∏—Ä–∞—Ç—å!")
        return
    
    # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    # If map is available for banning
    if map_name in selection_data['available_maps']:
        # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ
        # Remove map from available and add to banned
        selection_data['available_maps'].remove(map_name)
        selection_data['banned_maps'].append(map_name)
        
        await callback.answer(f"‚úÖ –ö–∞—Ä—Ç–∞ {map_name} –∏—Å–∫–ª—é—á–µ–Ω–∞!")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ—á–µ—Ä–µ–¥—å –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –∫–∞–ø–∏—Ç–∞–Ω–∞ (0->1 –∏–ª–∏ 1->0)
        # Switch turn to other captain (0->1 or 1->0)
        selection_data['current_turn'] = 1 - selection_data['current_turn']
        
        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞ - –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–±–æ—Ä
        # If only one map remains - finish selection
        if len(selection_data['available_maps']) == 1:
            final_map = selection_data['available_maps'][0]
            await finish_map_selection(callback.message, lobby_number, final_map)
        
        # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        # Otherwise show updated interface
        else:
            await show_map_selection_interface(callback.message, lobby_number)

@router.callback_query(F.data.startswith("leave_lobby_"))
async def handle_leave_lobby(callback: CallbackQuery):
    """
        –í—ã—Ö–æ–¥ –∏–∑ –ª–æ–±–±–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –±–∞–Ω–æ–≤
        Exiting the lobby with the ban system    
    """
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ª–æ–±–±–∏ –∏–∑ callback_data
    # Extract lobby number from callback_data
    lobby_number = callback.data.split("_")[2]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–±–±–∏
    # Get lobby data
    lobby_data = active_lobbies.get(lobby_number, {})
    
    # –ï—Å–ª–∏ –ª–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ (10 –∏–≥—Ä–æ–∫–æ–≤) - –±–∞–Ω –∑–∞ –≤—ã—Ö–æ–¥
    # If lobby is full (10 players) - ban for leaving
    if len(lobby_data.get('players', [])) >= 10:
        ban_user(user_id, "lobby_leave", "–í—ã—Ö–æ–¥ –∏–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –ª–æ–±–±–∏")
        
        await callback.message.edit_text(
            "üö´ <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω –∑–∞ –≤—ã—Ö–æ–¥ –∏–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –ª–æ–±–±–∏ –Ω–∞ 1 –º–∏–Ω—É—Ç—É</b>\n\n"
            "–ü—Ä–∏—á–∏–Ω–∞: –í—ã—Ö–æ–¥ –∏–∑ –ª–æ–±–±–∏ –ø–æ—Å–ª–µ –µ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\n"
            "–í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –ª–æ–±–±–∏ –¥–æ —Å–Ω—è—Ç–∏—è –±–∞–Ω–∞",
            parse_mode="HTML"
        )
    else:
        # –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤—ã—Ö–æ–¥–µ
        # Otherwise just notify about leaving
        await callback.message.edit_text(
            "‚ùå <b>–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ª–æ–±–±–∏</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /lobby —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–æ–º—É –ª–æ–±–±–∏",
            parse_mode="HTML"
        )
        
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –ª–æ–±–±–∏, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    # If user was in lobby, remove them
    if user_id in lobby_data.get('player_ids', []):
        index = lobby_data['player_ids'].index(user_id)
        lobby_data['players'].pop(index)
        lobby_data['player_ids'].pop(index)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
        # Remove user's message from the list
        lobby_data['messages'] = [msg for msg in lobby_data.get('messages', []) if msg['user_id'] != user_id]
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∫–∞–ø–∏—Ç–∞–Ω–æ–º, –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–≥–æ
        # If user was captain, select new one
        if user_id in lobby_data.get('captains', []):
            available_players = [pid for pid in lobby_data['player_ids'] if pid != user_id]
            if available_players:
                lobby_data['captains'] = random.sample(available_players, min(2, len(available_players)))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤
    # Update messages for remaining players
    await update_lobby_messages(callback.bot, lobby_number)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–±–±–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # Update lobby list for all users
    await update_lobby_list(callback.bot)
    
    # –ï—Å–ª–∏ –≤ –ª–æ–±–±–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä–æ–∫–æ–≤, –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    # If no players left in lobby, clean up data
    if len(lobby_data.get('players', [])) == 0:
        if lobby_number in active_lobbies:
            del active_lobbies[lobby_number]
        if lobby_number in map_selections:
            del map_selections[lobby_number]

async def finish_map_selection(message: Message, lobby_number: str, final_map: str):
    """
        –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
        Completing the card selection with saving to the database
    """
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–±–±–∏
    # Get lobby data
    lobby_data = active_lobbies.get(lobby_number, {})
    real_players = lobby_data.get('players', [])  # –ù–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ | Player nicknames
    player_ids = lobby_data.get('player_ids', []) # ID –∏–≥—Ä–æ–∫–æ–≤ | Player IDs
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –¥–≤–µ –∫–æ–º–∞–Ω–¥—ã
    # Split players into two teams
    team_a_players = real_players[:5]   # –ü–µ—Ä–≤—ã–µ 5 –∏–≥—Ä–æ–∫–æ–≤ | First 5 players
    team_b_players = real_players[5:10] # –°–ª–µ–¥—É—é—â–∏–µ 5 –∏–≥—Ä–æ–∫–æ–≤ | Next 5 players
    
    captain_names = {}
    host_game_id = "–ù–µ –Ω–∞–π–¥–µ–Ω"  # ID –∏–≥—Ä—ã —Ö–æ—Å—Ç–∞ | Host game ID

    with Session(engine) as session:
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ø–∏—Ç–∞–Ω–∞—Ö
        # Collect information about captains
        for i, captain_id in enumerate(lobby_data.get('captains', [])):
            if captain_id in lobby_data.get('player_profiles', {}):
                profile = lobby_data['player_profiles'][captain_id]
                captain_names[captain_id] = profile.nickname
                # –ü–µ—Ä–≤—ã–π –∫–∞–ø–∏—Ç–∞–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ö–æ—Å—Ç–æ–º | First captain becomes host
                if i == 0:
                    host_game_id = profile.game_id
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç –≤ –∫—ç—à–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ –ë–î
                # If profile not in cache, query from DB
                user_stmt = select(UsersSchema).where(UsersSchema.telegram_id == captain_id)
                user = session.exec(user_stmt).first()
                
                if user:
                    profile_stmt = select(GameProfilesSchema).where(GameProfilesSchema.user_id == user.user_id)
                    profile = session.exec(profile_stmt).first()
                    
                    if profile:
                        captain_names[captain_id] = profile.nickname
                        if i == 0:
                            host_game_id = profile.game_id
                    else:
                        captain_names[captain_id] = user.first_name
                else:
                    captain_names[captain_id] = f"–ò–≥—Ä–æ–∫ {captain_id}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ª–æ–±–±–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        # Generate unique lobby ID from current time
        lobby_id = int(datetime.now().strftime("%m%d%H%M%S"))
        
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –º–∞—Ç—á–µ –≤ –ë–î –∫–æ–≥–¥–∞ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
        # Create match record in DB when game start
        new_match = MatchesSchema(
            map_name=final_map, # –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ | Selected map
            status="created",   # –°—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞ | Match status
            lobby_id=lobby_id   # ID –ª–æ–±–±–∏ | Lobby ID
        )
        session.add(new_match)
        session.commit()
        session.refresh(new_match)
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞ | Get created match ID
        match_id = new_match.match_id
        
        found_match = FoundMatchSchema(
            lobby_id=lobby_id,
            players=json.dumps(player_ids), # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–≥—Ä–æ–∫–æ–≤ –∫–∞–∫ JSON | Save player IDs as JSON
            max_players=10,
            current_players=len(player_ids),
            status="finished",
            match_id=match_id,
            game_started_at=datetime.now(moscow_tz)
        )
        session.add(found_match)
        session.commit()
    
    final_text = (
        f"üéÆ <b>–ò–ì–†–ê –°–û–ó–î–ê–ù–ê</b>\n\n"
        f"üî¢ <b>–ù–æ–º–µ—Ä –∏–≥—Ä—ã:</b> #{match_id}\n"
        f"üéØ <b>–ö–∞—Ä—Ç–∞:</b> {final_map}\n"
        f"üë§ <b>–•–æ—Å—Ç:</b> {host_game_id}\n"
        f"üëë <b>–ö–∞–ø–∏—Ç–∞–Ω—ã:</b> {captain_names[lobby_data['captains'][0]]} (–ê) vs {captain_names[lobby_data['captains'][1]]} (–ë)\n"
        f"üè† <b>Lobby ID:</b> {lobby_id}\n\n"
        f"üîµ <b>–ö–æ–º–∞–Ω–¥–∞ –ê:</b>\n" + "\n".join([f"  ‚Ä¢ {player}" for player in team_a_players]) + f"\n\n"
        f"üî¥ <b>–ö–æ–º–∞–Ω–¥–∞ –ë:</b>\n" + "\n".join([f"  ‚Ä¢ {player}" for player in team_b_players]) + f"\n\n"
        f"‚ö° <b>–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ!</b>"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –ª–æ–±–±–∏
    for message_info in lobby_data.get('messages', []):
        try:
            await message.bot.edit_message_text(
                chat_id=message_info['chat_id'],
                message_id=message_info['message_id'],
                text=final_text,
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è user_id {message_info['user_id']}: {e}")
    
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–±–±–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    # Clean up lobby data after completion
    if lobby_number in active_lobbies:
        del active_lobbies[lobby_number]
    if lobby_number in map_selections:
        del map_selections[lobby_number]